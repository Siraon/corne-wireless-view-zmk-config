/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        ralt {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <15 16>;
        };

        bsp {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
        };

        ent {
            bindings = <&kp ENTER>;
            key-positions = <31 32>;
        };

        cx {
            bindings = <&kp LC(X)>;
            key-positions = <25 26>;
        };

        cc {
            bindings = <&kp LC(C)>;
            key-positions = <26 27>;
        };

        cv {
            bindings = <&kp LC(V)>;
            key-positions = <27 28>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        alt4 {
            bindings = <&kp LA(F4)>;
            key-positions = <1 2 3>;
        };

        f5 {
            bindings = <&kp F5>;
            key-positions = <3 4 5>;
        };

        question {
            bindings = <&kp QUESTION>;
            key-positions = <34 33>;
        };

        cb {
            bindings = <&kp LC(B)>;
            key-positions = <28 29>;
        };

        btclr {
            bindings = <&bt BT_CLR>;
            key-positions = <13 14 15 16>;
        };

        ca {
            bindings = <&kp LC(A)>;
            key-positions = <13 14>;
        };

        b {
            bindings = <&kp B>;
            key-positions = <30 31>;
        };

        p {
            bindings = <&kp LS(P)>;
            key-positions = <9 10>;
        };

        o {
            bindings = <&kp LS(O)>;
            key-positions = <9 8>;
        };

        aps {
            bindings = <&kp LS(APOSTROPHE)>;
            key-positions = <22 21>;
        };

        f2 {
            bindings = <&kp F2>;
            key-positions = <2 3>;
        };

        lshftEnt {
            bindings = <&kp LS(ENTER)>;
            key-positions = <31 32 33>;
        };

        ctrlZ {
            bindings = <&kp LC(Z)>;
            key-positions = <25 36>;
        };

        tidle {
            bindings = <&kp TILDE>;
            key-positions = <1 25>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <6 7>;
        };

        capture {
            bindings = <&kp LC(LS(C))>;
            key-positions = <25 26 27>;
        };

        auphostropi {
            bindings = <&kp LS(APOSTROPHE)>;
            key-positions = <20 21 22>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Base";
            bindings = <
&trans  &kp Q  &kp W  &kp E      &kp R             &kp T        &kp Y  &kp U  &kp I      &kp O    &kp P            &trans
&trans  &kp A  &kp S  &kp D      &kp F             &kp G        &kp H  &kp J  &kp K      &kp L    &kp SEMI         &trans
&trans  &kp Z  &kp X  &kp C      &kp V             &kp B        &kp N  &kp M  &kp COMMA  &kp DOT  &kp RIGHT_SHIFT  &trans
                      &kp MINUS  &kp LEFT_CONTROL  &kp SPACE    &mo 1  &mo 2  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Lower";
            bindings = <
&trans  &kp N1          &kp N2  &kp N3  &kp N4  &kp N5       &kp N6    &kp N7         &kp N8       &kp N9     &kp N0  &trans
&trans  &trans          &trans  &trans  &trans  &trans       &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &trans  &trans
&trans  &kp LEFT_SHIFT  &trans  &trans  &trans  &trans       &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &trans  &trans
                                &trans  &trans  &kp SPACE    &kp RET   &trans         &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Raise";
            bindings = <
&trans  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR          &kp RPAR           &trans
&trans  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &trans           &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans
&trans  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC          &kp PIPE           &trans
                          &kp LGUI  &trans    &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans      &trans      &trans      &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_NXT  &bt BT_PRV  &bt BT_CLR  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans      &trans      &trans      &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                &trans      &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
